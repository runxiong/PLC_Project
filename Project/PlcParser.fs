// Implementation file for parser generated by fsyacc
module PlcParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "PlcParser.fsy"

 open Absyn
 open ParAux

# 11 "PlcParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | HASH
  | COMMA
  | COLON
  | SEMIC
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | EQ
  | NEQ
  | LT
  | LTE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | PRINT
  | CONS
  | HEAD
  | TAIL
  | ISE
  | NOT
  | AND
  | IF
  | THEN
  | ELSE
  | VAR
  | FUN
  | REC
  | DARROW
  | FN
  | END
  | UNIT
  | BOOL
  | INT
  | LIST
  | TUPLE
  | ARROW
  | CSTBOOL of (bool)
  | NAME of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_HASH
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMIC
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LT
    | TOKEN_LTE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PRINT
    | TOKEN_CONS
    | TOKEN_HEAD
    | TOKEN_TAIL
    | TOKEN_ISE
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_VAR
    | TOKEN_FUN
    | TOKEN_REC
    | TOKEN_DARROW
    | TOKEN_FN
    | TOKEN_END
    | TOKEN_UNIT
    | TOKEN_BOOL
    | TOKEN_INT
    | TOKEN_LIST
    | TOKEN_TUPLE
    | TOKEN_ARROW
    | TOKEN_CSTBOOL
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Prog
    | NONTERM_Decl
    | NONTERM_ArgList
    | NONTERM_Expr
    | NONTERM_AtomicExpr
    | NONTERM_Lcomps
    | NONTERM_AppExpr
    | NONTERM_Const
    | NONTERM_Comps
    | NONTERM_Args
    | NONTERM_Params
    | NONTERM_TypedVar
    | NONTERM_Type
    | NONTERM_AtomicType
    | NONTERM_Types

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | HASH  -> 1 
  | COMMA  -> 2 
  | COLON  -> 3 
  | SEMIC  -> 4 
  | LPAR  -> 5 
  | RPAR  -> 6 
  | LBRACE  -> 7 
  | RBRACE  -> 8 
  | LBRACK  -> 9 
  | RBRACK  -> 10 
  | EQ  -> 11 
  | NEQ  -> 12 
  | LT  -> 13 
  | LTE  -> 14 
  | PLUS  -> 15 
  | MINUS  -> 16 
  | TIMES  -> 17 
  | DIV  -> 18 
  | PRINT  -> 19 
  | CONS  -> 20 
  | HEAD  -> 21 
  | TAIL  -> 22 
  | ISE  -> 23 
  | NOT  -> 24 
  | AND  -> 25 
  | IF  -> 26 
  | THEN  -> 27 
  | ELSE  -> 28 
  | VAR  -> 29 
  | FUN  -> 30 
  | REC  -> 31 
  | DARROW  -> 32 
  | FN  -> 33 
  | END  -> 34 
  | UNIT  -> 35 
  | BOOL  -> 36 
  | INT  -> 37 
  | LIST  -> 38 
  | TUPLE  -> 39 
  | ARROW  -> 40 
  | CSTBOOL _ -> 41 
  | NAME _ -> 42 
  | CSTINT _ -> 43 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_HASH 
  | 2 -> TOKEN_COMMA 
  | 3 -> TOKEN_COLON 
  | 4 -> TOKEN_SEMIC 
  | 5 -> TOKEN_LPAR 
  | 6 -> TOKEN_RPAR 
  | 7 -> TOKEN_LBRACE 
  | 8 -> TOKEN_RBRACE 
  | 9 -> TOKEN_LBRACK 
  | 10 -> TOKEN_RBRACK 
  | 11 -> TOKEN_EQ 
  | 12 -> TOKEN_NEQ 
  | 13 -> TOKEN_LT 
  | 14 -> TOKEN_LTE 
  | 15 -> TOKEN_PLUS 
  | 16 -> TOKEN_MINUS 
  | 17 -> TOKEN_TIMES 
  | 18 -> TOKEN_DIV 
  | 19 -> TOKEN_PRINT 
  | 20 -> TOKEN_CONS 
  | 21 -> TOKEN_HEAD 
  | 22 -> TOKEN_TAIL 
  | 23 -> TOKEN_ISE 
  | 24 -> TOKEN_NOT 
  | 25 -> TOKEN_AND 
  | 26 -> TOKEN_IF 
  | 27 -> TOKEN_THEN 
  | 28 -> TOKEN_ELSE 
  | 29 -> TOKEN_VAR 
  | 30 -> TOKEN_FUN 
  | 31 -> TOKEN_REC 
  | 32 -> TOKEN_DARROW 
  | 33 -> TOKEN_FN 
  | 34 -> TOKEN_END 
  | 35 -> TOKEN_UNIT 
  | 36 -> TOKEN_BOOL 
  | 37 -> TOKEN_INT 
  | 38 -> TOKEN_LIST 
  | 39 -> TOKEN_TUPLE 
  | 40 -> TOKEN_ARROW 
  | 41 -> TOKEN_CSTBOOL 
  | 42 -> TOKEN_NAME 
  | 43 -> TOKEN_CSTINT 
  | 46 -> TOKEN_end_of_input
  | 44 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Prog 
    | 3 -> NONTERM_Prog 
    | 4 -> NONTERM_Decl 
    | 5 -> NONTERM_Decl 
    | 6 -> NONTERM_Decl 
    | 7 -> NONTERM_ArgList 
    | 8 -> NONTERM_ArgList 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | 24 -> NONTERM_Expr 
    | 25 -> NONTERM_Expr 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_Expr 
    | 28 -> NONTERM_Expr 
    | 29 -> NONTERM_Expr 
    | 30 -> NONTERM_AtomicExpr 
    | 31 -> NONTERM_AtomicExpr 
    | 32 -> NONTERM_AtomicExpr 
    | 33 -> NONTERM_AtomicExpr 
    | 34 -> NONTERM_AtomicExpr 
    | 35 -> NONTERM_AtomicExpr 
    | 36 -> NONTERM_AtomicExpr 
    | 37 -> NONTERM_Lcomps 
    | 38 -> NONTERM_Lcomps 
    | 39 -> NONTERM_AppExpr 
    | 40 -> NONTERM_AppExpr 
    | 41 -> NONTERM_Const 
    | 42 -> NONTERM_Const 
    | 43 -> NONTERM_Const 
    | 44 -> NONTERM_Const 
    | 45 -> NONTERM_Comps 
    | 46 -> NONTERM_Comps 
    | 47 -> NONTERM_Args 
    | 48 -> NONTERM_Args 
    | 49 -> NONTERM_Params 
    | 50 -> NONTERM_Params 
    | 51 -> NONTERM_TypedVar 
    | 52 -> NONTERM_Type 
    | 53 -> NONTERM_Type 
    | 54 -> NONTERM_Type 
    | 55 -> NONTERM_Type 
    | 56 -> NONTERM_AtomicType 
    | 57 -> NONTERM_AtomicType 
    | 58 -> NONTERM_AtomicType 
    | 59 -> NONTERM_AtomicType 
    | 60 -> NONTERM_Types 
    | 61 -> NONTERM_Types 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 46 
let _fsyacc_tagOfErrorTerminal = 44

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | HASH  -> "HASH" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | SEMIC  -> "SEMIC" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | LT  -> "LT" 
  | LTE  -> "LTE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PRINT  -> "PRINT" 
  | CONS  -> "CONS" 
  | HEAD  -> "HEAD" 
  | TAIL  -> "TAIL" 
  | ISE  -> "ISE" 
  | NOT  -> "NOT" 
  | AND  -> "AND" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | VAR  -> "VAR" 
  | FUN  -> "FUN" 
  | REC  -> "REC" 
  | DARROW  -> "DARROW" 
  | FN  -> "FN" 
  | END  -> "END" 
  | UNIT  -> "UNIT" 
  | BOOL  -> "BOOL" 
  | INT  -> "INT" 
  | LIST  -> "LIST" 
  | TUPLE  -> "TUPLE" 
  | ARROW  -> "ARROW" 
  | CSTBOOL _ -> "CSTBOOL" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | HASH  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMIC  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LTE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | CONS  -> (null : System.Object) 
  | HEAD  -> (null : System.Object) 
  | TAIL  -> (null : System.Object) 
  | ISE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | DARROW  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | UNIT  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | LIST  -> (null : System.Object) 
  | TUPLE  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 6us; 7us; 75us; 76us; 3us; 65535us; 0us; 5us; 6us; 5us; 75us; 5us; 3us; 65535us; 13us; 14us; 24us; 25us; 82us; 83us; 29us; 65535us; 0us; 4us; 6us; 4us; 10us; 11us; 15us; 16us; 22us; 23us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 60us; 46us; 61us; 47us; 62us; 48us; 63us; 49us; 64us; 50us; 65us; 51us; 66us; 52us; 67us; 53us; 68us; 54us; 69us; 55us; 70us; 56us; 75us; 4us; 78us; 57us; 84us; 58us; 102us; 59us; 34us; 65535us; 0us; 26us; 6us; 26us; 10us; 26us; 15us; 26us; 22us; 26us; 26us; 93us; 27us; 94us; 28us; 26us; 30us; 26us; 32us; 26us; 34us; 26us; 36us; 26us; 38us; 26us; 40us; 26us; 42us; 26us; 44us; 26us; 60us; 26us; 61us; 26us; 62us; 26us; 63us; 26us; 64us; 26us; 65us; 26us; 66us; 26us; 67us; 26us; 68us; 26us; 69us; 26us; 70us; 26us; 75us; 26us; 78us; 26us; 84us; 26us; 86us; 90us; 87us; 90us; 91us; 90us; 102us; 26us; 3us; 65535us; 86us; 88us; 87us; 88us; 91us; 92us; 29us; 65535us; 0us; 27us; 6us; 27us; 10us; 27us; 15us; 27us; 22us; 27us; 28us; 27us; 30us; 27us; 32us; 27us; 34us; 27us; 36us; 27us; 38us; 27us; 40us; 27us; 42us; 27us; 44us; 27us; 60us; 27us; 61us; 27us; 62us; 27us; 63us; 27us; 64us; 27us; 65us; 27us; 66us; 27us; 67us; 27us; 68us; 27us; 69us; 27us; 70us; 27us; 75us; 27us; 78us; 27us; 84us; 27us; 102us; 27us; 34us; 65535us; 0us; 73us; 6us; 73us; 10us; 73us; 15us; 73us; 22us; 73us; 26us; 73us; 27us; 73us; 28us; 73us; 30us; 73us; 32us; 73us; 34us; 73us; 36us; 73us; 38us; 73us; 40us; 73us; 42us; 73us; 44us; 73us; 60us; 73us; 61us; 73us; 62us; 73us; 63us; 73us; 64us; 73us; 65us; 73us; 66us; 73us; 67us; 73us; 68us; 73us; 69us; 73us; 70us; 73us; 75us; 73us; 78us; 73us; 84us; 73us; 86us; 73us; 87us; 73us; 91us; 73us; 102us; 73us; 2us; 65535us; 78us; 80us; 102us; 103us; 4us; 65535us; 13us; 24us; 18us; 19us; 24us; 24us; 82us; 24us; 2us; 65535us; 104us; 106us; 109us; 110us; 2us; 65535us; 104us; 108us; 109us; 108us; 8us; 65535us; 20us; 21us; 99us; 100us; 112us; 113us; 116us; 126us; 120us; 121us; 127us; 123us; 131us; 124us; 133us; 125us; 8us; 65535us; 20us; 114us; 99us; 114us; 112us; 114us; 116us; 114us; 120us; 114us; 127us; 114us; 131us; 114us; 133us; 114us; 2us; 65535us; 116us; 117us; 133us; 134us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; 15us; 45us; 80us; 84us; 114us; 149us; 152us; 157us; 160us; 163us; 172us; 181us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 13us; 2us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 13us; 4us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 2us; 5us; 6us; 1us; 5us; 1us; 5us; 1us; 5us; 13us; 5us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 2us; 6us; 55us; 1us; 6us; 13us; 6us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 2us; 7us; 8us; 1us; 8us; 2us; 9us; 39us; 2us; 10us; 40us; 1us; 11us; 13us; 11us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 11us; 13us; 11us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 11us; 13us; 11us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 12us; 13us; 12us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 13us; 13us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 14us; 13us; 14us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 15us; 13us; 15us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 16us; 13us; 16us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 17us; 13us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 22us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 24us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 28us; 29us; 15us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 33us; 45us; 46us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 35us; 15us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 45us; 45us; 46us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 4us; 33us; 34us; 43us; 44us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 36us; 2us; 36us; 44us; 1us; 36us; 1us; 36us; 2us; 37us; 38us; 1us; 38us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 44us; 2us; 44us; 55us; 1us; 44us; 2us; 45us; 46us; 1us; 46us; 2us; 47us; 48us; 1us; 47us; 1us; 48us; 1us; 48us; 2us; 49us; 50us; 1us; 50us; 1us; 50us; 1us; 51us; 1us; 51us; 2us; 51us; 55us; 1us; 52us; 1us; 53us; 1us; 53us; 1us; 53us; 1us; 53us; 1us; 54us; 1us; 54us; 2us; 54us; 55us; 1us; 54us; 2us; 55us; 55us; 2us; 55us; 59us; 4us; 55us; 60us; 60us; 61us; 3us; 55us; 60us; 61us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 59us; 2us; 60us; 61us; 1us; 61us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 48us; 51us; 53us; 55us; 57us; 71us; 73us; 75us; 77us; 79us; 82us; 84us; 98us; 101us; 103us; 106us; 109us; 111us; 125us; 127us; 141us; 143us; 157us; 159us; 173us; 175us; 189us; 191us; 205us; 207us; 221us; 223us; 237us; 239us; 253us; 267us; 281us; 295us; 309us; 323us; 337us; 351us; 365us; 379us; 393us; 407us; 423us; 437us; 453us; 455us; 457us; 459us; 461us; 463us; 465us; 467us; 469us; 471us; 473us; 475us; 477us; 479us; 481us; 483us; 485us; 487us; 489us; 494us; 496us; 498us; 500us; 502us; 504us; 506us; 508us; 510us; 513us; 515us; 517us; 520us; 522us; 524us; 526us; 528us; 530us; 532us; 534us; 536us; 538us; 541us; 543us; 546us; 548us; 551us; 553us; 555us; 557us; 560us; 562us; 564us; 566us; 568us; 571us; 573us; 575us; 577us; 579us; 581us; 583us; 585us; 588us; 590us; 593us; 596us; 601us; 605us; 607us; 609us; 611us; 613us; 615us; 617us; 620us; |]
let _fsyacc_action_rows = 135
let _fsyacc_actionTableElements = [|16us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 29us; 8us; 30us; 12us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 12us; 16386us; 1us; 71us; 4us; 70us; 11us; 64us; 12us; 65us; 13us; 66us; 14us; 67us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 25us; 68us; 1us; 32768us; 4us; 6us; 16us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 29us; 8us; 30us; 12us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 0us; 16387us; 1us; 32768us; 42us; 9us; 1us; 32768us; 11us; 10us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 11us; 16388us; 1us; 71us; 11us; 64us; 12us; 65us; 13us; 66us; 14us; 67us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 25us; 68us; 2us; 32768us; 31us; 17us; 42us; 13us; 1us; 32768us; 5us; 104us; 1us; 32768us; 11us; 15us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 11us; 16389us; 1us; 71us; 11us; 64us; 12us; 65us; 13us; 66us; 14us; 67us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 25us; 68us; 1us; 32768us; 42us; 18us; 1us; 32768us; 5us; 104us; 1us; 32768us; 3us; 20us; 6us; 32768us; 5us; 131us; 35us; 128us; 36us; 129us; 37us; 130us; 38us; 119us; 39us; 115us; 2us; 32768us; 11us; 22us; 40us; 127us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 11us; 16390us; 1us; 71us; 11us; 64us; 12us; 65us; 13us; 66us; 14us; 67us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 25us; 68us; 1us; 16391us; 5us; 104us; 0us; 16392us; 7us; 16393us; 5us; 78us; 7us; 75us; 9us; 86us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 7us; 16394us; 5us; 78us; 7us; 75us; 9us; 86us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 13us; 32768us; 1us; 71us; 4us; 70us; 11us; 64us; 12us; 65us; 13us; 66us; 14us; 67us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 25us; 68us; 27us; 30us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 13us; 32768us; 1us; 71us; 4us; 70us; 11us; 64us; 12us; 65us; 13us; 66us; 14us; 67us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 25us; 68us; 28us; 32us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 11us; 16395us; 1us; 71us; 11us; 64us; 12us; 65us; 13us; 66us; 14us; 67us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 25us; 68us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 1us; 16396us; 1us; 71us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 3us; 16397us; 1us; 71us; 17us; 62us; 18us; 63us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 1us; 16398us; 1us; 71us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 1us; 16399us; 1us; 71us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 1us; 16400us; 1us; 71us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 1us; 16401us; 1us; 71us; 3us; 16402us; 1us; 71us; 17us; 62us; 18us; 63us; 3us; 16403us; 1us; 71us; 17us; 62us; 18us; 63us; 1us; 16404us; 1us; 71us; 1us; 16405us; 1us; 71us; 8us; 16406us; 1us; 71us; 13us; 66us; 14us; 67us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 8us; 16407us; 1us; 71us; 13us; 66us; 14us; 67us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 6us; 16408us; 1us; 71us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 6us; 16409us; 1us; 71us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 10us; 16410us; 1us; 71us; 11us; 64us; 12us; 65us; 13us; 66us; 14us; 67us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 6us; 16411us; 1us; 71us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 12us; 16412us; 1us; 71us; 4us; 70us; 11us; 64us; 12us; 65us; 13us; 66us; 14us; 67us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 25us; 68us; 14us; 32768us; 1us; 71us; 2us; 102us; 4us; 70us; 6us; 79us; 11us; 64us; 12us; 65us; 13us; 66us; 14us; 67us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 25us; 68us; 13us; 32768us; 1us; 71us; 4us; 70us; 11us; 64us; 12us; 65us; 13us; 66us; 14us; 67us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 25us; 68us; 34us; 85us; 13us; 16429us; 1us; 71us; 2us; 102us; 4us; 70us; 11us; 64us; 12us; 65us; 13us; 66us; 14us; 67us; 15us; 60us; 16us; 61us; 17us; 62us; 18us; 63us; 20us; 69us; 25us; 68us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 1us; 32768us; 43us; 72us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 16us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 29us; 8us; 30us; 12us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 1us; 32768us; 8us; 77us; 0us; 16416us; 15us; 32768us; 5us; 78us; 6us; 97us; 7us; 75us; 9us; 87us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 0us; 16417us; 1us; 32768us; 6us; 81us; 0us; 16418us; 1us; 32768us; 5us; 104us; 1us; 32768us; 32us; 84us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 0us; 16419us; 7us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 8us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 10us; 98us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 1us; 32768us; 10us; 89us; 0us; 16420us; 1us; 16421us; 4us; 91us; 7us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 1us; 32768us; 3us; 99us; 6us; 32768us; 5us; 131us; 35us; 128us; 36us; 129us; 37us; 130us; 38us; 119us; 39us; 115us; 2us; 32768us; 6us; 101us; 40us; 127us; 0us; 16428us; 14us; 32768us; 5us; 78us; 7us; 75us; 9us; 86us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 82us; 41us; 95us; 42us; 74us; 43us; 96us; 0us; 16430us; 2us; 32768us; 6us; 105us; 42us; 111us; 0us; 16431us; 1us; 32768us; 6us; 107us; 0us; 16432us; 1us; 16433us; 2us; 109us; 1us; 32768us; 42us; 111us; 0us; 16434us; 1us; 32768us; 3us; 112us; 6us; 32768us; 5us; 131us; 35us; 128us; 36us; 129us; 37us; 130us; 38us; 119us; 39us; 115us; 1us; 16435us; 40us; 127us; 0us; 16436us; 1us; 32768us; 9us; 116us; 6us; 32768us; 5us; 131us; 35us; 128us; 36us; 129us; 37us; 130us; 38us; 119us; 39us; 115us; 1us; 32768us; 10us; 118us; 0us; 16437us; 1us; 32768us; 9us; 120us; 6us; 32768us; 5us; 131us; 35us; 128us; 36us; 129us; 37us; 130us; 38us; 119us; 39us; 115us; 2us; 32768us; 10us; 122us; 40us; 127us; 0us; 16438us; 1us; 16439us; 40us; 127us; 2us; 32768us; 6us; 132us; 40us; 127us; 2us; 16444us; 2us; 133us; 40us; 127us; 2us; 32768us; 2us; 133us; 40us; 127us; 6us; 32768us; 5us; 131us; 35us; 128us; 36us; 129us; 37us; 130us; 38us; 119us; 39us; 115us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 6us; 32768us; 5us; 131us; 35us; 128us; 36us; 129us; 37us; 130us; 38us; 119us; 39us; 115us; 0us; 16443us; 6us; 32768us; 5us; 131us; 35us; 128us; 36us; 129us; 37us; 130us; 38us; 119us; 39us; 115us; 0us; 16445us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 17us; 18us; 20us; 21us; 34us; 36us; 53us; 54us; 56us; 58us; 73us; 85us; 88us; 90us; 92us; 107us; 119us; 121us; 123us; 125us; 132us; 135us; 150us; 162us; 164us; 165us; 173us; 181us; 196us; 210us; 225us; 239us; 254us; 266us; 281us; 283us; 298us; 302us; 317us; 319us; 334us; 336us; 351us; 353us; 368us; 370us; 374us; 378us; 380us; 382us; 391us; 400us; 407us; 414us; 425us; 432us; 445us; 460us; 474us; 488us; 503us; 518us; 533us; 548us; 563us; 578us; 593us; 608us; 623us; 638us; 653us; 655us; 656us; 657us; 658us; 675us; 677us; 678us; 694us; 695us; 697us; 698us; 700us; 702us; 717us; 718us; 726us; 735us; 737us; 738us; 740us; 748us; 749us; 750us; 751us; 752us; 753us; 754us; 756us; 763us; 766us; 767us; 782us; 783us; 786us; 787us; 789us; 790us; 792us; 794us; 795us; 797us; 804us; 806us; 807us; 809us; 816us; 818us; 819us; 821us; 828us; 831us; 832us; 834us; 837us; 840us; 843us; 850us; 851us; 852us; 853us; 860us; 861us; 868us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 3us; 4us; 5us; 8us; 1us; 2us; 1us; 1us; 6us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 3us; 3us; 3us; 5us; 3us; 1us; 3us; 2us; 2us; 1us; 1us; 2us; 6us; 3us; 3us; 2us; 3us; 1us; 3us; 3us; 1us; 4us; 4us; 3us; 1us; 1us; 1us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 12us; 13us; 14us; 14us; 14us; 14us; 15us; 15us; 15us; 15us; 16us; 16us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16413us; 16414us; 16415us; 65535us; 65535us; 16416us; 65535us; 16417us; 65535us; 16418us; 65535us; 65535us; 65535us; 16419us; 65535us; 65535us; 65535us; 16420us; 65535us; 65535us; 16422us; 16423us; 16424us; 16425us; 16426us; 16427us; 65535us; 65535us; 65535us; 16428us; 65535us; 16430us; 65535us; 16431us; 65535us; 16432us; 65535us; 65535us; 16434us; 65535us; 65535us; 65535us; 16436us; 65535us; 65535us; 65535us; 16437us; 65535us; 65535us; 65535us; 16438us; 65535us; 65535us; 65535us; 65535us; 65535us; 16440us; 16441us; 16442us; 65535us; 16443us; 65535us; 16445us; |]
let _fsyacc_reductions ()  =    [| 
# 401 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 410 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "PlcParser.fsy"
                                     _1 
                   )
# 66 "PlcParser.fsy"
                 : Absyn.expr));
# 421 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "PlcParser.fsy"
                                             _1             
                   )
# 70 "PlcParser.fsy"
                 : 'Prog));
# 432 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "PlcParser.fsy"
                                             makeExpr _1 _3 
                   )
# 71 "PlcParser.fsy"
                 : 'Prog));
# 444 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "PlcParser.fsy"
                                                                   A (_2, _4)         
                   )
# 75 "PlcParser.fsy"
                 : 'Decl));
# 456 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ArgList)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "PlcParser.fsy"
                                                                   B (_2, _3, _5)     
                   )
# 76 "PlcParser.fsy"
                 : 'Decl));
# 469 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "PlcParser.fsy"
                                                                   C (_3, _4, _6, _8) 
                   )
# 77 "PlcParser.fsy"
                 : 'Decl));
# 483 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "PlcParser.fsy"
                                        _1 :: [] 
                   )
# 81 "PlcParser.fsy"
                 : 'ArgList));
# 494 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ArgList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "PlcParser.fsy"
                                        _1 :: _2 
                   )
# 82 "PlcParser.fsy"
                 : 'ArgList));
# 506 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtomicExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "PlcParser.fsy"
                                                         _1                       
                   )
# 86 "PlcParser.fsy"
                 : 'Expr));
# 517 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AppExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "PlcParser.fsy"
                                                         _1                       
                   )
# 87 "PlcParser.fsy"
                 : 'Expr));
# 528 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "PlcParser.fsy"
                                                         If (_2, _4, _6)          
                   )
# 88 "PlcParser.fsy"
                 : 'Expr));
# 541 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "PlcParser.fsy"
                                                         Prim1 ("!", _2)          
                   )
# 89 "PlcParser.fsy"
                 : 'Expr));
# 552 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "PlcParser.fsy"
                                                         Prim1 ("-", _2)          
                   )
# 90 "PlcParser.fsy"
                 : 'Expr));
# 563 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "PlcParser.fsy"
                                                         Prim1 ("hd", _2)         
                   )
# 91 "PlcParser.fsy"
                 : 'Expr));
# 574 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "PlcParser.fsy"
                                                         Prim1 ("tl", _2)         
                   )
# 92 "PlcParser.fsy"
                 : 'Expr));
# 585 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "PlcParser.fsy"
                                                         Prim1 ("print", _2)      
                   )
# 93 "PlcParser.fsy"
                 : 'Expr));
# 596 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "PlcParser.fsy"
                                                         Prim1 ("ise", _2)        
                   )
# 94 "PlcParser.fsy"
                 : 'Expr));
# 607 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "PlcParser.fsy"
                                                         Prim2 ("+", _1, _3)      
                   )
# 95 "PlcParser.fsy"
                 : 'Expr));
# 619 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "PlcParser.fsy"
                                                         Prim2 ("-", _1, _3)      
                   )
# 96 "PlcParser.fsy"
                 : 'Expr));
# 631 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "PlcParser.fsy"
                                                         Prim2 ("*", _1, _3)      
                   )
# 97 "PlcParser.fsy"
                 : 'Expr));
# 643 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "PlcParser.fsy"
                                                         Prim2 ("/", _1, _3)      
                   )
# 98 "PlcParser.fsy"
                 : 'Expr));
# 655 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "PlcParser.fsy"
                                                         Prim2 ("=", _1, _3)      
                   )
# 99 "PlcParser.fsy"
                 : 'Expr));
# 667 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "PlcParser.fsy"
                                                         Prim2 ("!=", _1, _3)     
                   )
# 100 "PlcParser.fsy"
                 : 'Expr));
# 679 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "PlcParser.fsy"
                                                         Prim2 ("<", _1, _3)      
                   )
# 101 "PlcParser.fsy"
                 : 'Expr));
# 691 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "PlcParser.fsy"
                                                         Prim2 ("<=", _1, _3)     
                   )
# 102 "PlcParser.fsy"
                 : 'Expr));
# 703 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "PlcParser.fsy"
                                                         Prim2 ("&&", _1, _3)     
                   )
# 103 "PlcParser.fsy"
                 : 'Expr));
# 715 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "PlcParser.fsy"
                                                         Prim2 ("::", _1, _3)     
                   )
# 104 "PlcParser.fsy"
                 : 'Expr));
# 727 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "PlcParser.fsy"
                                                         Prim2 (";", _1, _3)      
                   )
# 105 "PlcParser.fsy"
                 : 'Expr));
# 739 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "PlcParser.fsy"
                                                         Sel (_1, _3)             
                   )
# 106 "PlcParser.fsy"
                 : 'Expr));
# 751 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "PlcParser.fsy"
                                                           _1                    
                   )
# 109 "PlcParser.fsy"
                 : 'AtomicExpr));
# 762 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "PlcParser.fsy"
                                                           Var _1                
                   )
# 110 "PlcParser.fsy"
                 : 'AtomicExpr));
# 773 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "PlcParser.fsy"
                                                           _2                    
                   )
# 111 "PlcParser.fsy"
                 : 'AtomicExpr));
# 784 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "PlcParser.fsy"
                                                           _2                    
                   )
# 112 "PlcParser.fsy"
                 : 'AtomicExpr));
# 795 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Comps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "PlcParser.fsy"
                                                           Tuple _2              
                   )
# 113 "PlcParser.fsy"
                 : 'AtomicExpr));
# 806 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ArgList)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "PlcParser.fsy"
                                                           makeAnonCurried _2 _4 
                   )
# 114 "PlcParser.fsy"
                 : 'AtomicExpr));
# 818 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lcomps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "PlcParser.fsy"
                                                           _2                    
                   )
# 115 "PlcParser.fsy"
                 : 'AtomicExpr));
# 829 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtomicExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "PlcParser.fsy"
                                                    Prim2("::", _1, EList (IntT))   
                   )
# 120 "PlcParser.fsy"
                 : 'Lcomps));
# 840 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtomicExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lcomps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "PlcParser.fsy"
                                                    Prim2("::", _1, _3)             
                   )
# 121 "PlcParser.fsy"
                 : 'Lcomps));
# 852 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtomicExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtomicExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "PlcParser.fsy"
                                                   Call (_1, _2) 
                   )
# 125 "PlcParser.fsy"
                 : 'AppExpr));
# 864 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AppExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtomicExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "PlcParser.fsy"
                                                   Call (_1, _2) 
                   )
# 126 "PlcParser.fsy"
                 : 'AppExpr));
# 876 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "PlcParser.fsy"
                                                                 ConB (_1)  
                   )
# 130 "PlcParser.fsy"
                 : 'Const));
# 887 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "PlcParser.fsy"
                                                                 ConI (_1)  
                   )
# 131 "PlcParser.fsy"
                 : 'Const));
# 898 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "PlcParser.fsy"
                                                                 Tuple []   
                   )
# 132 "PlcParser.fsy"
                 : 'Const));
# 908 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "PlcParser.fsy"
                                                                 EList (_5) 
                   )
# 133 "PlcParser.fsy"
                 : 'Const));
# 919 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "PlcParser.fsy"
                                               [_1; _3] 
                   )
# 137 "PlcParser.fsy"
                 : 'Comps));
# 931 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Comps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "PlcParser.fsy"
                                               _1 :: _3 
                   )
# 138 "PlcParser.fsy"
                 : 'Comps));
# 943 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "PlcParser.fsy"
                                                  []  
                   )
# 142 "PlcParser.fsy"
                 : 'Args));
# 953 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "PlcParser.fsy"
                                                  _2  
                   )
# 143 "PlcParser.fsy"
                 : 'Args));
# 964 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedVar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "PlcParser.fsy"
                                                  _1 :: [] 
                   )
# 147 "PlcParser.fsy"
                 : 'Params));
# 975 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedVar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "PlcParser.fsy"
                                                  _1 :: _3 
                   )
# 148 "PlcParser.fsy"
                 : 'Params));
# 987 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "PlcParser.fsy"
                                              (_1, _3) 
                   )
# 152 "PlcParser.fsy"
                 : 'TypedVar));
# 999 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtomicType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "PlcParser.fsy"
                                                           _1            
                   )
# 156 "PlcParser.fsy"
                 : 'Type));
# 1010 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Types)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "PlcParser.fsy"
                                                           TupT (_3)     
                   )
# 157 "PlcParser.fsy"
                 : 'Type));
# 1021 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "PlcParser.fsy"
                                                           LisT _3       
                   )
# 158 "PlcParser.fsy"
                 : 'Type));
# 1032 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "PlcParser.fsy"
                                                           FunT (_1, _3) 
                   )
# 159 "PlcParser.fsy"
                 : 'Type));
# 1044 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "PlcParser.fsy"
                                              TupT [] 
                   )
# 163 "PlcParser.fsy"
                 : 'AtomicType));
# 1054 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "PlcParser.fsy"
                                              BooT    
                   )
# 164 "PlcParser.fsy"
                 : 'AtomicType));
# 1064 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "PlcParser.fsy"
                                              IntT    
                   )
# 165 "PlcParser.fsy"
                 : 'AtomicType));
# 1074 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "PlcParser.fsy"
                                              _2      
                   )
# 166 "PlcParser.fsy"
                 : 'AtomicType));
# 1085 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "PlcParser.fsy"
                                              [_1; _3] 
                   )
# 170 "PlcParser.fsy"
                 : 'Types));
# 1097 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Types)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "PlcParser.fsy"
                                              _1 :: _3 
                   )
# 171 "PlcParser.fsy"
                 : 'Types));
|]
# 1110 "PlcParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 47;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
