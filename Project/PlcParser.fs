// Implementation file for parser generated by fsyacc
module PlcParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "PlcParser.fsy"

 open Absyn
 open ParAux

# 11 "PlcParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | HASH
  | COMMA
  | COLON
  | SEMIC
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | EQ
  | NEQ
  | LT
  | LTE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | PRINT
  | CONS
  | HEAD
  | TAIL
  | ISE
  | NOT
  | AND
  | IF
  | THEN
  | ELSE
  | VAR
  | FUN
  | REC
  | DARROW
  | FN
  | END
  | UNIT
  | BOOL
  | INT
  | LIST
  | TUPLE
  | ARROW
  | CSTBOOL of (bool)
  | NAME of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_HASH
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMIC
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LT
    | TOKEN_LTE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PRINT
    | TOKEN_CONS
    | TOKEN_HEAD
    | TOKEN_TAIL
    | TOKEN_ISE
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_VAR
    | TOKEN_FUN
    | TOKEN_REC
    | TOKEN_DARROW
    | TOKEN_FN
    | TOKEN_END
    | TOKEN_UNIT
    | TOKEN_BOOL
    | TOKEN_INT
    | TOKEN_LIST
    | TOKEN_TUPLE
    | TOKEN_ARROW
    | TOKEN_CSTBOOL
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Prog
    | NONTERM_Decl
    | NONTERM_ArgList
    | NONTERM_Expr
    | NONTERM_AtomicExpr
    | NONTERM_AppExpr
    | NONTERM_Const
    | NONTERM_Comps
    | NONTERM_Args
    | NONTERM_Params
    | NONTERM_TypedVar
    | NONTERM_Type
    | NONTERM_AtomicType
    | NONTERM_Types

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | HASH  -> 1 
  | COMMA  -> 2 
  | COLON  -> 3 
  | SEMIC  -> 4 
  | LPAR  -> 5 
  | RPAR  -> 6 
  | LBRACE  -> 7 
  | RBRACE  -> 8 
  | LBRACK  -> 9 
  | RBRACK  -> 10 
  | EQ  -> 11 
  | NEQ  -> 12 
  | LT  -> 13 
  | LTE  -> 14 
  | PLUS  -> 15 
  | MINUS  -> 16 
  | TIMES  -> 17 
  | DIV  -> 18 
  | PRINT  -> 19 
  | CONS  -> 20 
  | HEAD  -> 21 
  | TAIL  -> 22 
  | ISE  -> 23 
  | NOT  -> 24 
  | AND  -> 25 
  | IF  -> 26 
  | THEN  -> 27 
  | ELSE  -> 28 
  | VAR  -> 29 
  | FUN  -> 30 
  | REC  -> 31 
  | DARROW  -> 32 
  | FN  -> 33 
  | END  -> 34 
  | UNIT  -> 35 
  | BOOL  -> 36 
  | INT  -> 37 
  | LIST  -> 38 
  | TUPLE  -> 39 
  | ARROW  -> 40 
  | CSTBOOL _ -> 41 
  | NAME _ -> 42 
  | CSTINT _ -> 43 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_HASH 
  | 2 -> TOKEN_COMMA 
  | 3 -> TOKEN_COLON 
  | 4 -> TOKEN_SEMIC 
  | 5 -> TOKEN_LPAR 
  | 6 -> TOKEN_RPAR 
  | 7 -> TOKEN_LBRACE 
  | 8 -> TOKEN_RBRACE 
  | 9 -> TOKEN_LBRACK 
  | 10 -> TOKEN_RBRACK 
  | 11 -> TOKEN_EQ 
  | 12 -> TOKEN_NEQ 
  | 13 -> TOKEN_LT 
  | 14 -> TOKEN_LTE 
  | 15 -> TOKEN_PLUS 
  | 16 -> TOKEN_MINUS 
  | 17 -> TOKEN_TIMES 
  | 18 -> TOKEN_DIV 
  | 19 -> TOKEN_PRINT 
  | 20 -> TOKEN_CONS 
  | 21 -> TOKEN_HEAD 
  | 22 -> TOKEN_TAIL 
  | 23 -> TOKEN_ISE 
  | 24 -> TOKEN_NOT 
  | 25 -> TOKEN_AND 
  | 26 -> TOKEN_IF 
  | 27 -> TOKEN_THEN 
  | 28 -> TOKEN_ELSE 
  | 29 -> TOKEN_VAR 
  | 30 -> TOKEN_FUN 
  | 31 -> TOKEN_REC 
  | 32 -> TOKEN_DARROW 
  | 33 -> TOKEN_FN 
  | 34 -> TOKEN_END 
  | 35 -> TOKEN_UNIT 
  | 36 -> TOKEN_BOOL 
  | 37 -> TOKEN_INT 
  | 38 -> TOKEN_LIST 
  | 39 -> TOKEN_TUPLE 
  | 40 -> TOKEN_ARROW 
  | 41 -> TOKEN_CSTBOOL 
  | 42 -> TOKEN_NAME 
  | 43 -> TOKEN_CSTINT 
  | 46 -> TOKEN_end_of_input
  | 44 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Prog 
    | 3 -> NONTERM_Prog 
    | 4 -> NONTERM_Decl 
    | 5 -> NONTERM_Decl 
    | 6 -> NONTERM_Decl 
    | 7 -> NONTERM_ArgList 
    | 8 -> NONTERM_ArgList 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | 24 -> NONTERM_Expr 
    | 25 -> NONTERM_Expr 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_Expr 
    | 28 -> NONTERM_Expr 
    | 29 -> NONTERM_Expr 
    | 30 -> NONTERM_Expr 
    | 31 -> NONTERM_AtomicExpr 
    | 32 -> NONTERM_AtomicExpr 
    | 33 -> NONTERM_AtomicExpr 
    | 34 -> NONTERM_AtomicExpr 
    | 35 -> NONTERM_AtomicExpr 
    | 36 -> NONTERM_AtomicExpr 
    | 37 -> NONTERM_AppExpr 
    | 38 -> NONTERM_AppExpr 
    | 39 -> NONTERM_Const 
    | 40 -> NONTERM_Const 
    | 41 -> NONTERM_Const 
    | 42 -> NONTERM_Const 
    | 43 -> NONTERM_Comps 
    | 44 -> NONTERM_Comps 
    | 45 -> NONTERM_Args 
    | 46 -> NONTERM_Args 
    | 47 -> NONTERM_Params 
    | 48 -> NONTERM_Params 
    | 49 -> NONTERM_TypedVar 
    | 50 -> NONTERM_Type 
    | 51 -> NONTERM_Type 
    | 52 -> NONTERM_Type 
    | 53 -> NONTERM_Type 
    | 54 -> NONTERM_AtomicType 
    | 55 -> NONTERM_AtomicType 
    | 56 -> NONTERM_AtomicType 
    | 57 -> NONTERM_AtomicType 
    | 58 -> NONTERM_Types 
    | 59 -> NONTERM_Types 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 46 
let _fsyacc_tagOfErrorTerminal = 44

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | HASH  -> "HASH" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | SEMIC  -> "SEMIC" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | LT  -> "LT" 
  | LTE  -> "LTE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PRINT  -> "PRINT" 
  | CONS  -> "CONS" 
  | HEAD  -> "HEAD" 
  | TAIL  -> "TAIL" 
  | ISE  -> "ISE" 
  | NOT  -> "NOT" 
  | AND  -> "AND" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | VAR  -> "VAR" 
  | FUN  -> "FUN" 
  | REC  -> "REC" 
  | DARROW  -> "DARROW" 
  | FN  -> "FN" 
  | END  -> "END" 
  | UNIT  -> "UNIT" 
  | BOOL  -> "BOOL" 
  | INT  -> "INT" 
  | LIST  -> "LIST" 
  | TUPLE  -> "TUPLE" 
  | ARROW  -> "ARROW" 
  | CSTBOOL _ -> "CSTBOOL" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | HASH  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMIC  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LTE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | CONS  -> (null : System.Object) 
  | HEAD  -> (null : System.Object) 
  | TAIL  -> (null : System.Object) 
  | ISE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | DARROW  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | UNIT  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | LIST  -> (null : System.Object) 
  | TUPLE  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 6us; 7us; 79us; 80us; 3us; 65535us; 0us; 5us; 6us; 5us; 79us; 5us; 4us; 65535us; 13us; 14us; 18us; 19us; 24us; 25us; 86us; 87us; 31us; 65535us; 0us; 4us; 6us; 4us; 10us; 11us; 15us; 16us; 22us; 23us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 61us; 46us; 62us; 47us; 63us; 48us; 64us; 49us; 65us; 50us; 66us; 51us; 67us; 52us; 68us; 53us; 69us; 54us; 70us; 55us; 71us; 56us; 74us; 57us; 75us; 57us; 79us; 4us; 82us; 58us; 88us; 59us; 99us; 60us; 33us; 65535us; 0us; 26us; 6us; 26us; 10us; 26us; 15us; 26us; 22us; 26us; 26us; 90us; 27us; 91us; 28us; 26us; 30us; 26us; 32us; 26us; 34us; 26us; 36us; 26us; 38us; 26us; 40us; 26us; 42us; 26us; 44us; 26us; 61us; 26us; 62us; 26us; 63us; 26us; 64us; 26us; 65us; 26us; 66us; 26us; 67us; 26us; 68us; 26us; 69us; 26us; 70us; 26us; 71us; 26us; 74us; 26us; 75us; 26us; 79us; 26us; 82us; 26us; 88us; 26us; 99us; 26us; 31us; 65535us; 0us; 27us; 6us; 27us; 10us; 27us; 15us; 27us; 22us; 27us; 28us; 27us; 30us; 27us; 32us; 27us; 34us; 27us; 36us; 27us; 38us; 27us; 40us; 27us; 42us; 27us; 44us; 27us; 61us; 27us; 62us; 27us; 63us; 27us; 64us; 27us; 65us; 27us; 66us; 27us; 67us; 27us; 68us; 27us; 69us; 27us; 70us; 27us; 71us; 27us; 74us; 27us; 75us; 27us; 79us; 27us; 82us; 27us; 88us; 27us; 99us; 27us; 33us; 65535us; 0us; 77us; 6us; 77us; 10us; 77us; 15us; 77us; 22us; 77us; 26us; 77us; 27us; 77us; 28us; 77us; 30us; 77us; 32us; 77us; 34us; 77us; 36us; 77us; 38us; 77us; 40us; 77us; 42us; 77us; 44us; 77us; 61us; 77us; 62us; 77us; 63us; 77us; 64us; 77us; 65us; 77us; 66us; 77us; 67us; 77us; 68us; 77us; 69us; 77us; 70us; 77us; 71us; 77us; 74us; 77us; 75us; 77us; 79us; 77us; 82us; 77us; 88us; 77us; 99us; 77us; 2us; 65535us; 82us; 84us; 99us; 100us; 4us; 65535us; 13us; 24us; 18us; 24us; 24us; 24us; 86us; 24us; 2us; 65535us; 101us; 103us; 106us; 107us; 2us; 65535us; 101us; 105us; 106us; 105us; 8us; 65535us; 20us; 21us; 96us; 97us; 109us; 110us; 113us; 123us; 117us; 118us; 124us; 120us; 128us; 121us; 130us; 122us; 8us; 65535us; 20us; 111us; 96us; 111us; 109us; 111us; 113us; 111us; 117us; 111us; 124us; 111us; 128us; 111us; 130us; 111us; 2us; 65535us; 113us; 114us; 130us; 131us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; 16us; 48us; 82us; 114us; 148us; 151us; 156us; 159us; 162us; 171us; 180us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 13us; 2us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 13us; 4us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 2us; 5us; 6us; 1us; 5us; 1us; 5us; 1us; 5us; 13us; 5us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 2us; 6us; 53us; 1us; 6us; 13us; 6us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 2us; 7us; 8us; 1us; 8us; 2us; 9us; 37us; 2us; 10us; 38us; 1us; 11us; 13us; 11us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 11us; 13us; 11us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 11us; 13us; 11us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 12us; 13us; 12us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 13us; 13us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 14us; 13us; 14us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 15us; 13us; 15us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 16us; 13us; 16us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 1us; 17us; 13us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 22us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 24us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 25us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 26us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 27us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 28us; 29us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 15us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 34us; 43us; 44us; 13us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 36us; 15us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 43us; 43us; 44us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 30us; 2us; 30us; 42us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 33us; 4us; 34us; 35us; 41us; 42us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 42us; 2us; 42us; 53us; 1us; 42us; 2us; 43us; 44us; 1us; 44us; 2us; 45us; 46us; 1us; 45us; 1us; 46us; 1us; 46us; 2us; 47us; 48us; 1us; 48us; 1us; 48us; 1us; 49us; 1us; 49us; 2us; 49us; 53us; 1us; 50us; 1us; 51us; 1us; 51us; 1us; 51us; 1us; 51us; 1us; 52us; 1us; 52us; 2us; 52us; 53us; 1us; 52us; 2us; 53us; 53us; 2us; 53us; 57us; 4us; 53us; 58us; 58us; 59us; 3us; 53us; 58us; 59us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 57us; 2us; 58us; 59us; 1us; 59us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 48us; 51us; 53us; 55us; 57us; 71us; 73us; 75us; 77us; 79us; 82us; 84us; 98us; 101us; 103us; 106us; 109us; 111us; 125us; 127us; 141us; 143us; 157us; 159us; 173us; 175us; 189us; 191us; 205us; 207us; 221us; 223us; 237us; 239us; 253us; 267us; 281us; 295us; 309us; 323us; 337us; 351us; 365us; 379us; 393us; 407us; 421us; 437us; 451us; 467us; 469us; 471us; 473us; 475us; 477us; 479us; 481us; 483us; 485us; 487us; 489us; 491us; 493us; 495us; 498us; 500us; 502us; 504us; 506us; 508us; 510us; 515us; 517us; 519us; 521us; 523us; 525us; 527us; 529us; 531us; 533us; 535us; 537us; 539us; 541us; 543us; 546us; 548us; 551us; 553us; 556us; 558us; 560us; 562us; 565us; 567us; 569us; 571us; 573us; 576us; 578us; 580us; 582us; 584us; 586us; 588us; 590us; 593us; 595us; 598us; 601us; 606us; 610us; 612us; 614us; 616us; 618us; 620us; 622us; 625us; |]
let _fsyacc_action_rows = 132
let _fsyacc_actionTableElements = [|16us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 29us; 8us; 30us; 12us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 12us; 16386us; 1us; 72us; 4us; 71us; 11us; 65us; 12us; 66us; 13us; 67us; 14us; 68us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 69us; 1us; 32768us; 4us; 6us; 16us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 29us; 8us; 30us; 12us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 0us; 16387us; 1us; 32768us; 42us; 9us; 1us; 32768us; 11us; 10us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 11us; 16388us; 1us; 72us; 11us; 65us; 12us; 66us; 13us; 67us; 14us; 68us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 69us; 2us; 32768us; 31us; 17us; 42us; 13us; 1us; 32768us; 5us; 101us; 1us; 32768us; 11us; 15us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 11us; 16389us; 1us; 72us; 11us; 65us; 12us; 66us; 13us; 67us; 14us; 68us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 69us; 1us; 32768us; 42us; 18us; 1us; 32768us; 5us; 101us; 1us; 32768us; 3us; 20us; 6us; 32768us; 5us; 128us; 35us; 125us; 36us; 126us; 37us; 127us; 38us; 116us; 39us; 112us; 2us; 32768us; 11us; 22us; 40us; 124us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 11us; 16390us; 1us; 72us; 11us; 65us; 12us; 66us; 13us; 67us; 14us; 68us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 69us; 1us; 16391us; 5us; 101us; 0us; 16392us; 6us; 16393us; 5us; 82us; 7us; 79us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 6us; 16394us; 5us; 82us; 7us; 79us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 13us; 32768us; 1us; 72us; 4us; 71us; 11us; 65us; 12us; 66us; 13us; 67us; 14us; 68us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 69us; 27us; 30us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 13us; 32768us; 1us; 72us; 4us; 71us; 11us; 65us; 12us; 66us; 13us; 67us; 14us; 68us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 69us; 28us; 32us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 11us; 16395us; 1us; 72us; 11us; 65us; 12us; 66us; 13us; 67us; 14us; 68us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 69us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 1us; 16396us; 1us; 72us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 3us; 16397us; 1us; 72us; 17us; 63us; 18us; 64us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 1us; 16398us; 1us; 72us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 1us; 16399us; 1us; 72us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 1us; 16400us; 1us; 72us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 1us; 16401us; 1us; 72us; 3us; 16402us; 1us; 72us; 17us; 63us; 18us; 64us; 3us; 16403us; 1us; 72us; 17us; 63us; 18us; 64us; 1us; 16404us; 1us; 72us; 1us; 16405us; 1us; 72us; 8us; 16406us; 1us; 72us; 13us; 67us; 14us; 68us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 8us; 16407us; 1us; 72us; 13us; 67us; 14us; 68us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 6us; 16408us; 1us; 72us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 6us; 16409us; 1us; 72us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 10us; 16410us; 1us; 72us; 11us; 65us; 12us; 66us; 13us; 67us; 14us; 68us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 6us; 16411us; 1us; 72us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 12us; 16412us; 1us; 72us; 4us; 71us; 11us; 65us; 12us; 66us; 13us; 67us; 14us; 68us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 69us; 13us; 32768us; 1us; 72us; 4us; 71us; 10us; 76us; 11us; 65us; 12us; 66us; 13us; 67us; 14us; 68us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 69us; 14us; 32768us; 1us; 72us; 2us; 99us; 4us; 71us; 6us; 83us; 11us; 65us; 12us; 66us; 13us; 67us; 14us; 68us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 69us; 13us; 32768us; 1us; 72us; 4us; 71us; 11us; 65us; 12us; 66us; 13us; 67us; 14us; 68us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 69us; 34us; 89us; 13us; 16427us; 1us; 72us; 2us; 99us; 4us; 71us; 11us; 65us; 12us; 66us; 13us; 67us; 14us; 68us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 69us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 1us; 32768us; 43us; 73us; 0us; 16413us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 15us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 10us; 95us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 16us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 29us; 8us; 30us; 12us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 1us; 32768us; 8us; 81us; 0us; 16417us; 15us; 32768us; 5us; 82us; 6us; 94us; 7us; 79us; 9us; 75us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 0us; 16418us; 1us; 32768us; 6us; 85us; 0us; 16419us; 1us; 32768us; 5us; 101us; 1us; 32768us; 32us; 88us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 1us; 32768us; 3us; 96us; 6us; 32768us; 5us; 128us; 35us; 125us; 36us; 126us; 37us; 127us; 38us; 116us; 39us; 112us; 2us; 32768us; 6us; 98us; 40us; 124us; 0us; 16426us; 14us; 32768us; 5us; 82us; 7us; 79us; 9us; 74us; 16us; 36us; 19us; 42us; 21us; 38us; 22us; 40us; 23us; 44us; 24us; 34us; 26us; 28us; 33us; 86us; 41us; 92us; 42us; 78us; 43us; 93us; 0us; 16428us; 2us; 32768us; 6us; 102us; 42us; 108us; 0us; 16429us; 1us; 32768us; 6us; 104us; 0us; 16430us; 1us; 16431us; 2us; 106us; 1us; 32768us; 42us; 108us; 0us; 16432us; 1us; 32768us; 3us; 109us; 6us; 32768us; 5us; 128us; 35us; 125us; 36us; 126us; 37us; 127us; 38us; 116us; 39us; 112us; 1us; 16433us; 40us; 124us; 0us; 16434us; 1us; 32768us; 9us; 113us; 6us; 32768us; 5us; 128us; 35us; 125us; 36us; 126us; 37us; 127us; 38us; 116us; 39us; 112us; 1us; 32768us; 10us; 115us; 0us; 16435us; 1us; 32768us; 9us; 117us; 6us; 32768us; 5us; 128us; 35us; 125us; 36us; 126us; 37us; 127us; 38us; 116us; 39us; 112us; 2us; 32768us; 10us; 119us; 40us; 124us; 0us; 16436us; 1us; 16437us; 40us; 124us; 2us; 32768us; 6us; 129us; 40us; 124us; 2us; 16442us; 2us; 130us; 40us; 124us; 2us; 32768us; 2us; 130us; 40us; 124us; 6us; 32768us; 5us; 128us; 35us; 125us; 36us; 126us; 37us; 127us; 38us; 116us; 39us; 112us; 0us; 16438us; 0us; 16439us; 0us; 16440us; 6us; 32768us; 5us; 128us; 35us; 125us; 36us; 126us; 37us; 127us; 38us; 116us; 39us; 112us; 0us; 16441us; 6us; 32768us; 5us; 128us; 35us; 125us; 36us; 126us; 37us; 127us; 38us; 116us; 39us; 112us; 0us; 16443us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 17us; 18us; 20us; 21us; 34us; 36us; 53us; 54us; 56us; 58us; 73us; 85us; 88us; 90us; 92us; 107us; 119us; 121us; 123us; 125us; 132us; 135us; 150us; 162us; 164us; 165us; 172us; 179us; 194us; 208us; 223us; 237us; 252us; 264us; 279us; 281us; 296us; 300us; 315us; 317us; 332us; 334us; 349us; 351us; 366us; 368us; 372us; 376us; 378us; 380us; 389us; 398us; 405us; 412us; 423us; 430us; 443us; 457us; 472us; 486us; 500us; 515us; 530us; 545us; 560us; 575us; 590us; 605us; 620us; 635us; 650us; 665us; 667us; 668us; 683us; 699us; 700us; 701us; 702us; 719us; 721us; 722us; 738us; 739us; 741us; 742us; 744us; 746us; 761us; 762us; 763us; 764us; 765us; 766us; 767us; 769us; 776us; 779us; 780us; 795us; 796us; 799us; 800us; 802us; 803us; 805us; 807us; 808us; 810us; 817us; 819us; 820us; 822us; 829us; 831us; 832us; 834us; 841us; 844us; 845us; 847us; 850us; 853us; 856us; 863us; 864us; 865us; 866us; 873us; 874us; 881us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 3us; 4us; 5us; 8us; 1us; 2us; 1us; 1us; 6us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 3us; 3us; 3us; 5us; 2us; 2us; 1us; 1us; 2us; 6us; 3us; 3us; 2us; 3us; 1us; 3us; 3us; 1us; 4us; 4us; 3us; 1us; 1us; 1us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 8us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 13us; 13us; 13us; 13us; 14us; 14us; 14us; 14us; 15us; 15us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 16414us; 16415us; 16416us; 65535us; 65535us; 16417us; 65535us; 16418us; 65535us; 16419us; 65535us; 65535us; 65535us; 16420us; 16421us; 16422us; 16423us; 16424us; 16425us; 65535us; 65535us; 65535us; 16426us; 65535us; 16428us; 65535us; 16429us; 65535us; 16430us; 65535us; 65535us; 16432us; 65535us; 65535us; 65535us; 16434us; 65535us; 65535us; 65535us; 16435us; 65535us; 65535us; 65535us; 16436us; 65535us; 65535us; 65535us; 65535us; 65535us; 16438us; 16439us; 16440us; 65535us; 16441us; 65535us; 16443us; |]
let _fsyacc_reductions ()  =    [| 
# 398 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 407 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "PlcParser.fsy"
                                     _1 
                   )
# 66 "PlcParser.fsy"
                 : Absyn.expr));
# 418 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "PlcParser.fsy"
                                             _1             
                   )
# 70 "PlcParser.fsy"
                 : 'Prog));
# 429 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "PlcParser.fsy"
                                             makeExpr _1 _3 
                   )
# 71 "PlcParser.fsy"
                 : 'Prog));
# 441 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "PlcParser.fsy"
                                                                   A (_2, _4)         
                   )
# 75 "PlcParser.fsy"
                 : 'Decl));
# 453 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ArgList)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "PlcParser.fsy"
                                                                   B (_2, _3, _5)     
                   )
# 76 "PlcParser.fsy"
                 : 'Decl));
# 466 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ArgList)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "PlcParser.fsy"
                                                                      C (_3, _4, _6, _8) 
                   )
# 77 "PlcParser.fsy"
                 : 'Decl));
# 480 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "PlcParser.fsy"
                                        _1 :: [] 
                   )
# 81 "PlcParser.fsy"
                 : 'ArgList));
# 491 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ArgList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "PlcParser.fsy"
                                        _1 :: _2 
                   )
# 82 "PlcParser.fsy"
                 : 'ArgList));
# 503 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtomicExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "PlcParser.fsy"
                                                         _1                       
                   )
# 86 "PlcParser.fsy"
                 : 'Expr));
# 514 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AppExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "PlcParser.fsy"
                                                         _1                       
                   )
# 87 "PlcParser.fsy"
                 : 'Expr));
# 525 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "PlcParser.fsy"
                                                         If (_2, _4, _6)          
                   )
# 88 "PlcParser.fsy"
                 : 'Expr));
# 538 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "PlcParser.fsy"
                                                         Prim1 ("!", _2)          
                   )
# 89 "PlcParser.fsy"
                 : 'Expr));
# 549 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "PlcParser.fsy"
                                                         Prim1 ("-", _2)          
                   )
# 90 "PlcParser.fsy"
                 : 'Expr));
# 560 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "PlcParser.fsy"
                                                         Prim1 ("hd", _2)         
                   )
# 91 "PlcParser.fsy"
                 : 'Expr));
# 571 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "PlcParser.fsy"
                                                         Prim1 ("tl", _2)         
                   )
# 92 "PlcParser.fsy"
                 : 'Expr));
# 582 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "PlcParser.fsy"
                                                         Prim1 ("print", _2)      
                   )
# 93 "PlcParser.fsy"
                 : 'Expr));
# 593 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "PlcParser.fsy"
                                                         Prim1 ("ise", _2)        
                   )
# 94 "PlcParser.fsy"
                 : 'Expr));
# 604 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "PlcParser.fsy"
                                                         Prim2 ("+", _1, _3)      
                   )
# 95 "PlcParser.fsy"
                 : 'Expr));
# 616 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "PlcParser.fsy"
                                                         Prim2 ("-", _1, _3)      
                   )
# 96 "PlcParser.fsy"
                 : 'Expr));
# 628 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "PlcParser.fsy"
                                                         Prim2 ("*", _1, _3)      
                   )
# 97 "PlcParser.fsy"
                 : 'Expr));
# 640 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "PlcParser.fsy"
                                                         Prim2 ("/", _1, _3)      
                   )
# 98 "PlcParser.fsy"
                 : 'Expr));
# 652 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "PlcParser.fsy"
                                                         Prim2 ("=", _1, _3)      
                   )
# 99 "PlcParser.fsy"
                 : 'Expr));
# 664 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "PlcParser.fsy"
                                                         Prim2 ("!=", _1, _3)     
                   )
# 100 "PlcParser.fsy"
                 : 'Expr));
# 676 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "PlcParser.fsy"
                                                         Prim2 ("<", _1, _3)      
                   )
# 101 "PlcParser.fsy"
                 : 'Expr));
# 688 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "PlcParser.fsy"
                                                         Prim2 ("<=", _1, _3)     
                   )
# 102 "PlcParser.fsy"
                 : 'Expr));
# 700 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "PlcParser.fsy"
                                                         Prim2 ("&&", _1, _3)     
                   )
# 103 "PlcParser.fsy"
                 : 'Expr));
# 712 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "PlcParser.fsy"
                                                         Prim2 ("::", _1, _3)     
                   )
# 104 "PlcParser.fsy"
                 : 'Expr));
# 724 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "PlcParser.fsy"
                                                         Prim2 (";", _1, _3)      
                   )
# 105 "PlcParser.fsy"
                 : 'Expr));
# 736 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "PlcParser.fsy"
                                                         Sel (_1, _3)             
                   )
# 106 "PlcParser.fsy"
                 : 'Expr));
# 748 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "PlcParser.fsy"
                                                         makeList _2             
                   )
# 107 "PlcParser.fsy"
                 : 'Expr));
# 759 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "PlcParser.fsy"
                                                           _1                    
                   )
# 111 "PlcParser.fsy"
                 : 'AtomicExpr));
# 770 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "PlcParser.fsy"
                                                           Var _1                
                   )
# 112 "PlcParser.fsy"
                 : 'AtomicExpr));
# 781 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "PlcParser.fsy"
                                                           _2                    
                   )
# 113 "PlcParser.fsy"
                 : 'AtomicExpr));
# 792 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "PlcParser.fsy"
                                                           _2                    
                   )
# 114 "PlcParser.fsy"
                 : 'AtomicExpr));
# 803 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Comps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "PlcParser.fsy"
                                                           Tuple _2              
                   )
# 115 "PlcParser.fsy"
                 : 'AtomicExpr));
# 814 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ArgList)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "PlcParser.fsy"
                                                           makeAnonCurried _2 _4 
                   )
# 116 "PlcParser.fsy"
                 : 'AtomicExpr));
# 826 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtomicExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtomicExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "PlcParser.fsy"
                                                   Call (_1, _2) 
                   )
# 120 "PlcParser.fsy"
                 : 'AppExpr));
# 838 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AppExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtomicExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "PlcParser.fsy"
                                                   Call (_1, _2) 
                   )
# 121 "PlcParser.fsy"
                 : 'AppExpr));
# 850 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "PlcParser.fsy"
                                                                 ConB (_1)  
                   )
# 125 "PlcParser.fsy"
                 : 'Const));
# 861 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "PlcParser.fsy"
                                                                 ConI (_1)  
                   )
# 126 "PlcParser.fsy"
                 : 'Const));
# 872 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "PlcParser.fsy"
                                                                 Tuple []   
                   )
# 127 "PlcParser.fsy"
                 : 'Const));
# 882 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "PlcParser.fsy"
                                                                 EList (_5) 
                   )
# 128 "PlcParser.fsy"
                 : 'Const));
# 893 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "PlcParser.fsy"
                                               [_1; _3] 
                   )
# 132 "PlcParser.fsy"
                 : 'Comps));
# 905 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Comps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "PlcParser.fsy"
                                               _1 :: _3 
                   )
# 133 "PlcParser.fsy"
                 : 'Comps));
# 917 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "PlcParser.fsy"
                                                  []  
                   )
# 137 "PlcParser.fsy"
                 : 'Args));
# 927 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "PlcParser.fsy"
                                                  _2  
                   )
# 138 "PlcParser.fsy"
                 : 'Args));
# 938 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedVar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "PlcParser.fsy"
                                                  _1 :: [] 
                   )
# 142 "PlcParser.fsy"
                 : 'Params));
# 949 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedVar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "PlcParser.fsy"
                                                  _1 :: _3 
                   )
# 143 "PlcParser.fsy"
                 : 'Params));
# 961 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "PlcParser.fsy"
                                              (_1, _3) 
                   )
# 147 "PlcParser.fsy"
                 : 'TypedVar));
# 973 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtomicType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "PlcParser.fsy"
                                                           _1            
                   )
# 151 "PlcParser.fsy"
                 : 'Type));
# 984 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Types)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "PlcParser.fsy"
                                                           TupT (_3)     
                   )
# 152 "PlcParser.fsy"
                 : 'Type));
# 995 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "PlcParser.fsy"
                                                           LisT _3       
                   )
# 153 "PlcParser.fsy"
                 : 'Type));
# 1006 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "PlcParser.fsy"
                                                           FunT (_1, _3) 
                   )
# 154 "PlcParser.fsy"
                 : 'Type));
# 1018 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "PlcParser.fsy"
                                              TupT [] 
                   )
# 158 "PlcParser.fsy"
                 : 'AtomicType));
# 1028 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "PlcParser.fsy"
                                              BooT    
                   )
# 159 "PlcParser.fsy"
                 : 'AtomicType));
# 1038 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "PlcParser.fsy"
                                              IntT    
                   )
# 160 "PlcParser.fsy"
                 : 'AtomicType));
# 1048 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "PlcParser.fsy"
                                              _2      
                   )
# 161 "PlcParser.fsy"
                 : 'AtomicType));
# 1059 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "PlcParser.fsy"
                                              [_1; _3] 
                   )
# 165 "PlcParser.fsy"
                 : 'Types));
# 1071 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Types)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "PlcParser.fsy"
                                              _1 :: _3 
                   )
# 166 "PlcParser.fsy"
                 : 'Types));
|]
# 1084 "PlcParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 47;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
